ETAPE 1 (Préparation de votre serveur pour accueilir votre nouveau CMS):

a) Mettre à jour sa distribution Linux:

apt-get upgrade --> vous aurez surement un message indiquant que votre distribution est à jour! Elle est à jour certes,
tout dépend de vos dépôts(!!) 

Taper sur Google et recherchez les dépôts principaux pour votre distribution (ex: https://wiki.debian.org/fr/SourcesList)
google search: dépôt debian main

b) Mettre à jour votre liste de paquets:

apt-get update une fois votre "Distribution Upgradée" 

ETAPE 2 (Préparation et installation du nécessaire pour Gazelle (lib && apps))
(en général, la plus part d'entre vous tournez sous l'utilisateur "Root", donc pas besoin à chaque fois de taper: "sudo")

*** il est fortement recommandé de créer un "Nouvel utilisateur au lieu d'utiliser le ROOT !!" 

sudo apt-get install mysql-server mysql-client libmysql++-dev libmysqld-dev \
libpng-dev libmcrypt-dev libxml2-dev memcached sphinxsearch binutils libev-dev git nginx \
php5-fpm php-soap php-pear php5-memcache php5-curl php5-mysql php5-mcrypt php5-gd postfix unzip

*** Nous conseillons l'utilisation de PostFix au lieu de Sendmail 
(Sendmail est relativement difficile à configurer pour, par exemple, gérer les "HEADERS" lors de l'envoi d'un mail.) 
PostFix est quand à lui relativement simple à prendre en main.

*** Une fois les paquets installés, faites un: apt-get update puis apt-get upgrade 
On vérifie de nouveau si tout est à jour !!

[NOTES]::Lors de la compilation d'Ocelot, certains d'entres vous rencontrerons probablement une ou plusieurs erreurs liées
à certaines "Libraires Manquantes" sur votre serveur dédié, il faudra chercher cette erreur et "Coller son code" 
au travers de Google afin d'obtenir de l'aide !

Nous allons renseigner ici quelques unes de ces "Erreur" lors de votre future "Compilation de Ocelot": 

ERR 1: Didn't find mysqlclient library in '/usr/lib/x86_64-linux-gnu/ /usr/lib/x86_64-linux-gnu//lib64 /usr/lib/x86_64-linux-gnu//lib /usr/lib/x86_64-linux-gnu//lib64/mysql /usr/lib/x86_64-linux-gnu//lib/mysql'

Cela vient probablement du fait qu'il manque la Lib: libev4 + libev-dev! Ajoutez ce paquet en tapant:
apt-get install libev4 libev-dev -y


ETAPE 3 (Ocelot préparation du terrain):

a) Préparation d'Ocelot (téléchargez le néessaire pour ocelot)

sudo apt-get install make g++ libbz2-dev libtcmalloc-minimal4

b) Quelques commandes sont requises

- Créer un lien pour la Librarie "TCMalloc"
sudo ln -s /usr/lib/libtcmalloc_minimal.so.4 /usr/lib/libtcmalloc.so

++ d'infos: http://goog-perftools.sourceforge.net/doc/tcmalloc.html


Installez les librairies Boost (vous aurez besoin de télécharger le package à cette adresse Lien: http://sourceforge.net/projects/boost/files/boost/):
[Marche à suivre]:

- Placez vous dans /home/$user  --> cd /home/dossier_de_votre_user
- wget http://sourceforge.net/projects/boost/files/boost/1.55.0/boost_1_55_0.zip
- unzip boost_1_55_0.zip
- cd boost_1_55_0/

On passe à la complilation de boost (tapez les 3 commandes suivantes une après l'autre):

./bootstrap.sh --prefix=/usr/local
./b2 stage toolset=gcc cxxflags=-std=gnu++11 threading=multi link=shared
sudo ./b2 install toolset=gcc cxxflags=-std=gnu++11 threading=multi link=shared

ETAPE 4(Configuration de NGinX):

a) Configurer Nginx
Tapez les commandes suivantes:

cd /
sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
*** (si nano n'est pas installé: apt-get install nano -y)

sudo nano /etc/nginx/sites-available/default

Copiez et coller cette configuration + Editez le HOST_NAME(remplacez par votre "Nom de Domaine" ou "Votre IP, celle du serveur"):

server {
        root /var/www;  
        # si vous souhaitez un autre dossier par ex /var/www/cms, c'est pareil, 
        # il vous faut simplement créer le dossier "cms" (mkdir cms ou tracker ou autre)
        # un "dièze en début de lign pour commenter la ligne
        # commentaire :)
        index index.php;

        server_name HOST_NAME;

        location / {
                try_files $uri $uri/ /index.php;
        }

        location ~ \.php$ {
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                include fastcgi_params;
        }
}

Pressez CTRL+X, tapez Yes pour sauvegarder votre nouvelle configuration pour NGinx

Relancez Nginx:

sudo service nginx restart


ETAPE 5 (Récupération et Configuration de Gazelle):
Configure Gazelle

On récupère Gazelle sur Git:

- apt-get install git (si besoin)
- git clone https://github.com/WhatCD/Gazelle.git

sudo mkdir /var/www 
et si besoin: sudo mkdir /var/www/cms (installation dans un sous-répertoire)
sudo cp -r Gazelle/* /var/www

*** ETAPE SQL (Création de la DB + Tables pour accueillir Gazelle)

mysql -u root -p < /var/www/gazelle.sql

[Note]:: Nous conseilleons de ne pas travailler en "ROOT" ! 
Il est préférable de créer un "Utilisateur" pour "Accéder aux données de vos Tables !!"

b) Edition du ficher de configuration dans /var/www/classes/config.php

sudo cp /var/www/classes/config.template /var/www/classes/config.php
sudo nano /var/www/classes/config.php

Configurer en fonction du serveur et de son IP et ou Nom de Domaine

<<Change site details and ports and fill in the encryption keys. (Named constant 'ENCKEY' must be 32 characters long.)>>


ETAPE 6:

a) Configuration de Sphinx (recherche de torrent..)

sudo cp /var/www/sphinx.conf /etc/sphinxsearch/
sudo nano /etc/sphinxsearch/sphinx.conf
sudo mkdir /var/lib/sphinx
sudo mkdir /var/log/searchd
sudo indexer -c /etc/sphinxsearch/sphinx.conf --all

Note: renseignez dans le fichier "sphinx.conf" le nom de la DB + les IDs de connexion à la DB !!

ETAPE 7 (Ocelot:: Cinfiguration et Compilation)

a) Configurer Ocelot

[Ocelot se trouve dans les sources de Gazelle !!]
Alternative::   wget https://what.cd/ocelot-0.8.tar.gz --no-check-certificate
                tar -zxf ocelot-0.8.tar.gz
                cd ocelot-0.8

cp config.cpp.template config.cpp
nano config.cpp

Note: Affiner votre fichier "config.cpp" avec vos Identifiants MYSQL et chnagez le port 2710 ou 34000 par celui que vous souhaitez
Ce port doit être le même que dans config.php (!!). 

ps: si vous utlisez CloudFlare, et si vous prenez par exemple chez cf le port 2052, dans votre fichier /var/classes/config.php et pour Ocelo avec le config.cpp"
vous devrez configurer vos 2 fichiers avec le port 2052 !! Vérifiez ces toujours: config.php et config.cpp !!

b) Configurer, Compiler, Installer
(vérifier que vous êtes toujours dans le répertoire de Ocelot)

Tapez les commandes suivantes:
./configure --with-mysql-lib=/usr/lib/x86_64-linux-gnu/ --with-ev-lib=/usr/lib/x86_64-linux-gnu/
ou
./configure --with-mysql-lib=/usr/lib/i386-linux-gnu/ --with-ev-lib=/usr/lib/i386-linux-gnu/
make
sudo make install

ETAPE 8 (Cron Job pour Gazelle)
Tapez les commandes suivantes:

mkdir ~/logs
sudo crontab -e

Copier et coller ceci dans le Treminal:

0,15,30,45 * * * * php /var/www/schedule.php SCHEDULE_KEY >> /home/USER/logs/schedule.log
10,25,40,55 * * * * php /var/www/peerupdate.php SCHEDULE_KEY >> /home/USER/logs/peerupdate.log

* * * * * indexer -c /etc/sphinxsearch/sphinx.conf --rotate delta requests_delta

5 0,12 * * * indexer -c /etc/sphinxsearch/sphinx.conf --rotate --all

IMPORTANT:: Remplacez SCHEDULE_KEY par votre MD5 ou chaine de 32 caractères dans qui se trouve dans config.php.
Vérifiez bien vos chaines de 32 caractères, et vos fichiers de config, si "Ocelot" ne démarre pas, possible problème dans vos fihiers de config !!!


c) Etape Memcached

sudo mv /etc/memcached.conf /etc/memcached.conf.bak
sudo nano /etc/memcached.conf

Copier et coller ceci dans le Treminal:

# Run memcached as a daemon. This command is implied, and is not needed for the
# daemon to run.
-d

# Log memcached's output to /var/log/memcached
logfile /var/log/memcached.log

# Start with a cap of 512 megs of memory.
# Note that the daemon will grow to this size, 
# but does not start out holding this much memory
-m 512

# Unix socket path to listen on (disables network support).
-s /var/run/memcached.sock

# Permissions (in octal format) for Unix socket created with -s option.
-a 0777

# Run the daemon as root.
-u root

# Disable the use of CAS (and reduce the per-item size by 8 bytes).
-C

CTRL+X puis Yes pour Sauvegarder.

Relancez memcached:

sudo service memcached restart


d) Etape Sphinx

Editez searchd dans /etc/init.d/searchd
sudo nano /etc/init.d/searchd

Copier et coller ceci:

#!/bin/bash

case "${1:-''}" in
  'start')
        /usr/bin/searchd
        ;;
  'stop')
        /usr/bin/searchd --stop
        ;;
  'restart')
        /usr/bin/searchd --stop && /usr/bin/searchd
        ;;
  *)
        echo "Usage: $SELF start|stop|restart"
        exit 1
        ;;
esac

Ctrl+X puis Yes pour Sauvegarder.

Ajustement des permissions:

sudo chmod +x /etc/init.d/searchd

Définir le service "searchd" au Boot:

sudo update-rc.d searchd defaults

Lancer searchd:

sudo service searchd start

Démarrage de Ocelot (Ocelot sera démarré dans un fenêtre de type: screen)

Tapez:
- screen + Entrer
- LD_LIBRARY_PATH=/usr/local/lib ocelot

Ocelot devrait se lancer correctement ;-)
Pour quitté screen, tapez: Ctrl+A+D
Pour revenir dans screen, tapez: screen -r ou screen -r + PID

ETAPE 9 (Configuartion de PHP)
Enable short open tags

sudo nano /etc/php5/fpm/php.ini

Under 'Language Options'

short_open_tag = On

Press Ctrl+X and select Yes.

sudo nano /etc/php5/cli/php.ini

Under 'Language Options'

short_open_tag = On

Press Ctrl+X and select Yes.

Enable mcrypt extension

sudo ln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/fpm/conf.d/20-mcrypt.ini
sudo ln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/cli/conf.d/20-mcrypt.ini

Restart php-fpm:

sudo service php5-fpm restart
